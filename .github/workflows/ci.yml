on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  js-build:
    name: "Core build"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Bun run build
        run: |
          bun i
          bun run build --prod

      - name: Upload artifact for C binding
        uses: actions/upload-artifact@v4
        with:
          name: cbinding-source
          path: packages/cbinding

  c-build:
    name: "C Binding Build"
    needs: js-build
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        arch: [x86_64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64
          - os: ubuntu-latest
            arch: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Download artifact for C binding
        uses: actions/download-artifact@v4
        with:
          name: cbinding-source
          path: packages/cbinding

      - name: Setup CMake
        uses: lukka/get-cmake@latest

      - name: Setup Windows dev command
        if: ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "source-dir=${{ github.workspace }}/packages/cbinding" >> "$GITHUB_OUTPUT"
          echo "build-dir=${{ github.workspace }}/packages/cbinding/build" >> "$GITHUB_OUTPUT"
          echo "install-dir=${{ github.workspace }}/packages/cbinding/install" >> "$GITHUB_OUTPUT"

      - name: Setup cache
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.strings.outputs.build-dir }}
          key: ${{ runner.os }}-${{ matrix.arch }}-build

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-dir }}
          -GNinja
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_APPLE_SILICON_PROCESSOR=${{ matrix.arch }}
          -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }}
          -S ${{ steps.strings.outputs.source-dir }}

      - name: CMake Build
        run: cmake --build ${{ steps.strings.outputs.build-dir }} --config ${{ matrix.build_type }}

      - name: CMake Install
        run: >
          cmake --install ${{ steps.strings.outputs.build-dir }}
          --config ${{ matrix.build_type }}
          --prefix ${{ steps.strings.outputs.install-dir }}

      - name: Upload C binding artifact
        uses: actions/upload-artifact@v4
        with:
          name: cbinding-library-${{ runner.os }}-${{ matrix.arch }}
          path: ${{ steps.strings.outputs.install-dir }}

    # - name: Test
    #   working-directory: ${{ steps.strings.outputs.build-dir }}
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest --build-config ${{ matrix.build_type }}

  py-build:
    name: "Python Binding Build"
    needs: c-build
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x86_64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64
          - os: ubuntu-latest
            arch: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        # as a task runner
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "cbinding-install-dir=${{ github.workspace }}/packages/cbinding/install" >> "$GITHUB_OUTPUT"
          echo "pybinding-cwd=${{ github.workspace }}/packages/pybinding" >> "$GITHUB_OUTPUT"
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Pip install
        working-directory: ${{ steps.strings.outputs.pybinding-cwd }}
        run: pip install -r requirements.txt
       
      - name: Download artifact from C binding
        uses: actions/download-artifact@v4
        with:
          name: cbinding-library-${{ runner.os }}-${{ matrix.arch }}
          path: ${{ steps.strings.outputs.cbinding-install-dir }}
      
      - name: Build python wheel and docs
        working-directory: ${{ steps.strings.outputs.pybinding-cwd }}
        run: bun run build

      - name: Upload Python binding artifact
        uses: actions/upload-artifact@v4
        with:
          name: pybinding-dist-${{ runner.os }}-${{ matrix.arch }}
          path: ${{ steps.strings.outputs.pybinding-cwd }}/dist

      - name: Upload Python Docs
        if: ${{ runner.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: pybinding-docs
          path: ${{ steps.strings.outputs.pybinding-cwd }}/_docs

        